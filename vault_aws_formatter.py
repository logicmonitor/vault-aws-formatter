#!/usr/bin/env python
from __future__ import print_function
import json
import sys

try:
    import argparse
    HAS_LIBS = True
except ImportError:
    HAS_LIBS = False

MODULE_LIST = [
    'argparse'
]


def output_file(data, profile):
    s = [
        '[' + profile + ']',
        format_file_pair('aws_access_key_id', data['access_key']),
        format_file_pair('aws_secret_access_key', data['secret_key'])
    ]
    if 'security_token' in data:
        s.append(format_file_pair('aws_session_token', data['security_token']))
    print('\n'.join(s))


def output_environment(data):
    s = [
        format_env_var('AWS_ACCESS_KEY_ID', data['access_key']),
        format_env_var('AWS_SECRET_ACCESS_KEY', data['secret_key'])
    ]
    if 'security_token' in data:
        s.append(format_env_var('AWS_SESSION_TOKEN', data['security_token']))
    print(' '.join(s))


def format_env_var(name, value):
    return 'export ' + shellquote(name) + '=' + shellquote(value)


def format_file_pair(name, value):
    return str(name) + '=' + str(value)


def format_data(data):
    if 'data' in data:
        data = data['data']
    return data


def shellquote(s):
    return str(s).replace("'", "'\\''")


def validate(data):
    err = []
    if 'data' in data:
        data = data['data']
    if 'access_key' not in data:
        err.append('Access Key ID not found in JSON')
    if 'secret_key' not in data:
        err.append('Secret Access Key not found in JSON')
    if len(err) > 0:
        fail('\n'.join(err))


def fail(message):
    print(message, file=sys.stderr)
    sys.exit(-1)


def setup_args():
    parser = argparse.ArgumentParser(
        description='''
This script is designed to format temporary AWS credentials
generated by the Vault CLI into a format suitable for use by the AWS CLI.

A typical workflow uses the Vault CLI to generate a set of AWS
credentials in json format, piping the output to this script,
and then making that output available to the AWS CLI via either environment
variables or AWS configuration files.

NOTE: These examples assume you have a properly configured Vault
CLI environment with an active Vault client token and as at
least one AWS secret backend configured.

For more information about configuring the Vault CLI, see:
https://www.vaultproject.io/docs/commands/index.html

Inject AWS credentials as environment variables:

    $(vault read -format=json aws/creds/test | vault_aws_formatter.py --format environment)

Inject AWS credentials into the AWS credentials file:

    vault read -format=json aws/creds/test | vault_aws_formatter.py --format file > ~/.aws/credentials

Inject AWS credentials into the AWS credentials file with a custom profile name:

    vault read -format=json aws/creds/test | vault_aws_formatter.py --format file --profile test > ~/.aws/credentials
        ''',
        formatter_class=argparse.RawDescriptionHelpFormatter
    )

    parser.add_argument(
        '-f',
        '--format',
        help='''
            The output format for the credentials.

            "environment" will output the keys in a format suitable for use
            as environment variables by the AWS CLI.

            Example: $(vault_aws_formatter.py -f environment)

            For more information, see: https://docs.aws.amazon.com/cli/latest/userguide/cli-environment.html

            "file" will output the keys in a format suitable for use in the
            AWS CLI credentials file.

            Example: vault_aws_formatter.py -f file > ~/.aws/credentials

            For more information, see: https://docs.aws.amazon.com/cli/latest/userguide/cli-config-files.html

        ''',
        default='environment',
        choices=['environment', 'file']
    )

    parser.add_argument(
        '-p',
        '--profile',
        help='''
            The name of the AWS profile to use in file formatted output.

            For more information, see: https://docs.aws.amazon.com/cli/latest/userguide/cli-multiple-profiles.html
        ''',
        default='default'
    )

    args = parser.parse_args()
    return args


def main():
    args = setup_args()

    data = json.load(sys.stdin)
    validate(data)
    data = format_data(data)

    if args.format == 'environment':
        output_environment(data)
    if args.format == 'file':
        output_file(data, args.profile)


if __name__ == "__main__":
    main()
